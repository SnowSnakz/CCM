// PLEASE DO NOT EDIT THIS FILE
// IT CONTAINS THE SETUP REQUIRED FOR CCM TO RECOGNIZE THE PLUGIN

#ifndef CCM_PLUGIN_MAIN_HPP
#define CCM_PLUGIN_MAIN_HPP

#include "plugin/plugin.hpp"
#include "plugin/context.hpp"

// Select platform dependent "EXPORT" method 
#if defined(_MSC_VER)
#define EXPORT __declspec(dllexport)
#elif defined(__GNUC__)
#define EXPORT __attribute__((visibility("default")))
#else
#error Unsupported platform or compiler toolchain.
#endif

// The following definitions are failsafes in case CMake fails to provide these definitions.
// Editing them should not have any effect as long as everything is working correctly.
#ifndef CCM_PLUGIN_CODE_NAME
#define CCM_PLUGIN_CODE_NAME ExamplePlugin
#endif

#ifndef CCM_PLUGIN_NAME
#define CCM_PLUGIN_NAME "Example Plugin"
#endif

#ifndef CCM_PLUGIN_DESCRIPTION
#define CCM_PLUGIN_DESCRIPTION "This plugin is an example plugin."
#endif

#ifndef CCM_PLUGIN_VERSION_MAJOR
#define CCM_PLUGIN_VERSION_MAJOR 1
#endif

#ifndef CCM_PLUGIN_VERSION_MINOR
#define CCM_PLUGIN_VERSION_MINOR 0
#endif

#ifndef CCM_PLUGIN_VERSION_BUILD
#define CCM_PLUGIN_VERSION_BUILD 0
#endif

#ifndef CCM_PLUGIN_TYPE
#define CCM_PLUGIN_TYPE CCM_EDITOR_AND_RUNTIME
#endif

#ifndef CCM_PLUGIN_VENDOR
#define CCM_PLUGIN_VENDOR "Amazing Plugin Developer"
#endif

#ifndef CCM_PLUGIN_UUID

// Fallback UUID
#define CCM_PLUGIN_UUID 00000000-0000-0000-0000-000000000000

// Complain about not having a UUID defined...
#pragma warning "CCM_PLUGIN_UUID must be defined for the plugin to function correctly. (CMake should handle this automatically...)"
#endif

// Define the Plugin's main class 

// The follow macros expand to "CCM<PluginName>" which is used as the name of the main plugin class.
#define _CREATE_MAIN_CLASS_NAME_B(a, b) a ## b
#define _CREATE_MAIN_CLASS_NAME_A(a, b) _CREATE_MAIN_CLASS_NAME_B( a, b )
#define _MAIN_CLASS _CREATE_MAIN_CLASS_NAME_A( CCM, CCM_PLUGIN_CODE_NAME )

class _MAIN_CLASS : public CCMplugin
{
private:
    _MAIN_CLASS();

    // Allow the constructor to be called from the getPluginInstance() method.
    friend CCMplugin* getPluginInstance();

protected:
    // Implement abstract methods.
    bool isCompatible(CCMversion version) override;
    void onReady(CCMplugincontext ctx) override;

    // Include "PluginBody.inc" (contains additional members so that developers don't have to sift through CCMplugin.hpp)
#include "PluginBody.inc"
};

// This function is called by CCMplugincontext, it is used to get an instance of the plugin's main class.
EXPORT CCMplugin* getPluginInstance(); 

#endif
